# ---- Helper functions for computing the MAP ----

# Scaled logistic function for constraining parameters
scaledlogistic(Œ∏, Œ©)    = scaledlogistic(Œ∏, minimum(Œ©), maximum(Œ©))
scaledlogistic(Œ∏, a, b) = a + (b - a) / (1 + exp(-Œ∏))

# Inverse of scaledlogistic
scaledlogit(f, Œ©)    = scaledlogit(f, minimum(Œ©), maximum(Œ©))
scaledlogit(f, a, b) = log((f - a) / (b - f))


# ---- Efficient gaussianloglikelihood ----

# The density function is
# ```math
# |2\pi\mathbf{\Sigma}|^{-1/2} \exp{-\frac{1}{2}\mathbf{y}^\top \mathbf{\Sigma}^{-1}\mathbf{y}},
# ```
# and the log-density is
# ```math
# -\frac{n}{2}\ln{2\pi}  -\frac{1}{2}\ln{|\mathbf{\Sigma}|} -\frac{1}{2}\mathbf{y}^\top \mathbf{\Sigma}^{-1}\mathbf{y}.
# ```

@doc raw"""
    gaussiandensity(y::V, L; logdensity = true) where {V <: AbstractVector{T}} where T
	gaussiandensity(y::A, Œ£; logdensity = true) where {A <: AbstractArray{T, N}} where {T, N}

Efficiently computes the density function for `y` ~ ùëÅ(0, `Œ£`), with `L` the
lower Cholesky factor of the covariance matrix `Œ£`.

The method `gaussiandensity(y::A, Œ£)` assumes that the last dimension of `y`
corresponds to the independent-replicates dimension, and it exploits the fact
that we need to compute the Cholesky factor `L` for these independent replicates
once only.
"""
function gaussiandensity(y::V, L; logdensity::Bool = true) where {V <: AbstractVector{T}} where T
	n = length(y)
	x = L \ y # solution to Lx = y. If we need non-zero Œº in the future, use x = L \ (y - Œº)
	l = -0.5n*log(2œÄ) -logdet(L) -0.5dot(x, x)
    return logdensity ? l : exp(l)
end

function gaussiandensity(y::A, Œ£; logdensity::Bool = true) where {A <: AbstractArray{T, N}} where {T, N}

	# Here, we use `Symmetric()` to indicate that Œ£ is positive-definite;
	# this can help to alleviate issues caused by rounding, as described at
	# https://discourse.julialang.org/t/is-this-a-bug-with-cholesky/16970/3.
	L  = cholesky(Symmetric(Œ£)).L
	l = mapslices(y -> gaussiandensity(vec(y), L, logdensity = logdensity), y, dims = 1:(N-1))
	return logdensity ? sum(l) : prod(l)
end



# ---- Bivariate density function for Schlather's model ----

G(z‚ÇÅ, z‚ÇÇ, œà)   = exp(-V(z‚ÇÅ, z‚ÇÇ, œà))
G‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = (V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà) * V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) - V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)) * exp(-V(z‚ÇÅ, z‚ÇÇ, œà))
logG‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = log(V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà) * V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) - V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)) - V(z‚ÇÅ, z‚ÇÇ, œà)
f(z‚ÇÅ, z‚ÇÇ, œà)   = z‚ÇÅ^2 - 2*z‚ÇÅ*z‚ÇÇ*œà + z‚ÇÇ^2 # function to reduce code repetition
V(z‚ÇÅ, z‚ÇÇ, œà)   = (1/z‚ÇÅ + 1/z‚ÇÇ) * (1 - 0.5(1 - (z‚ÇÅ+z‚ÇÇ)^-1 * f(z‚ÇÅ, z‚ÇÇ, œà)^0.5))
V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà)  = -0.5 * z‚ÇÅ^-2 + 0.5(œà / z‚ÇÅ - z‚ÇÇ/(z‚ÇÅ^2)) * f(z‚ÇÅ, z‚ÇÇ, œà)^-0.5
V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)  = V‚ÇÅ(z‚ÇÇ, z‚ÇÅ, œà)
V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = -0.5(1 - œà^2) * f(z‚ÇÅ, z‚ÇÇ, œà)^-1.5

"""
	schlatherbivariatedensity(z‚ÇÅ, z‚ÇÇ, œà; logdensity = true)
The bivariate density function for Schlather's max-stable model, as given in
Huser (2013, pg. 231--232).

Huser, R. (2013). Statistical Modeling and Inference for Spatio-Temporal Ex-
tremes. PhD thesis, Swiss Federal Institute of Technology, Lausanne, Switzerland.
"""
schlatherbivariatedensity(z‚ÇÅ, z‚ÇÇ, œà; logdensity::Bool = true) = logdensity ? logG‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) : G‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)
_schlatherbivariatecdf(z‚ÇÅ, z‚ÇÇ, œà) = G(z‚ÇÅ, z‚ÇÇ, œà)
